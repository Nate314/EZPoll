{"remainingRequest":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\src\\components\\CreateQuestion.vue?vue&type=style&index=0&id=51127b9c&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\src\\components\\CreateQuestion.vue","mtime":1590350147810},{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KYnV0dG9uIHsNCiAgICB3aWR0aDogNDAwcHg7DQogICAgaGVpZ2h0OiA1MHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDE1cHg7DQp9DQo="},{"version":3,"sources":["CreateQuestion.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;AACA;AACA;AACA;AACA","file":"CreateQuestion.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <div v-for=\"question in questionTypes\" :key=\"question.QuestionGUID\">\r\n            <button v-on:click=\"questionSelected(question)\">{{question.Description}}</button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'CreateQuestion',\r\n  data() {\r\n      return {\r\n          questionTypes: []\r\n      }\r\n  },\r\n  methods: {\r\n    questionSelected: function(question) {\r\n        const session_guid = localStorage.getItem('session_guid');\r\n        if (session_guid) {\r\n            fetch(`${localStorage.getItem('api_url')}/session/${session_guid}`, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    action: 'next',\r\n                    user_guid: localStorage.getItem('user_guid'),\r\n                    question_guid: question.QuestionGUID\r\n                })\r\n            }).then(x => x.json())\r\n            .then(response => {\r\n                console.log(response);\r\n                this.$router.push(`session/${session_guid}`);\r\n            });\r\n        } else {\r\n            fetch(`${localStorage.getItem('api_url')}/session/new`, {\r\n                method: 'post',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    user_guid: localStorage.getItem('user_guid'),\r\n                    question_guid: question.QuestionGUID\r\n                })\r\n            }).then(x => x.json())\r\n            .then(response => {\r\n                localStorage.setItem('session_guid', response.SessionGUID);\r\n                this.$router.push('home');\r\n            });\r\n        }\r\n        // fetch(`${localStorage.getItem('api_url')}/question/${question.QuestionGUID}`).then(x => x.json())\r\n        //     .then(response => console.log(response));\r\n      }\r\n  },\r\n  mounted() {\r\n      fetch(`${localStorage.getItem('api_url')}/question/all`).then(x => x.json())\r\n        .then(response => this.questionTypes = response);\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nbutton {\r\n    width: 400px;\r\n    height: 50px;\r\n    margin-bottom: 15px;\r\n}\r\n</style>\r\n"]}]}