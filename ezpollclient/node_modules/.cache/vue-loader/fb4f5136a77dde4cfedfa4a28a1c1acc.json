{"remainingRequest":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\src\\components\\Question.vue?vue&type=style&index=0&id=abfd55c2&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\src\\components\\Question.vue","mtime":1590441940036},{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Natha\\Documents\\Development\\HTML\\ezpoll\\ezpollclient\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5idG5zZWxlY3RlZCB7DQogIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUE7DQp9DQo="},{"version":3,"sources":["Question.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;AACA;AACA","file":"Question.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <h1 v-if=\"question\">\r\n        {{question.Description}} ?\r\n    </h1>\r\n    <div v-if=\"!(info && info.results)\">\r\n      <div v-for=\"(answer, index) in answers\" :key=\"answer.AnswerGUID\">\r\n        <button class=\"my-button\" :class=\"{ 'btnselected': index == selected_index }\"\r\n          v-on:click=\"answerSelected(answer)\">{{answer.Description}}</button>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"info && info.participant_count\">\r\n      <h3>{{info.answers_count}} / {{info.participant_count}} participants have answered . . .</h3>\r\n      <button v-if=\"info.enable_host_btns\" v-on:click=\"showResults\">Show Results</button>\r\n    </div>\r\n    <div v-if=\"info && info.results\">\r\n      <div v-for=\"result in info.results\" :key=\"result.AnswerGUID\">\r\n        <button>\r\n          {{result.Description}}\r\n        </button>\r\n        <div>\r\n          <progress :value=\"100 * result.AnswerCount / info.responses\" max=\"100\" style=\"width:300px;\"></progress>\r\n          <div>{{Math.round(100 * result.AnswerCount / info.responses)}}% ({{result.AnswerCount}}/{{info.responses}})</div>\r\n        </div>\r\n      </div>\r\n      <button v-if=\"info.enable_host_btns\" v-on:click=\"nextQuestion\">NextQuestion</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as ezpollapi from '../services/ezpoll.service';\r\n\r\nexport default {\r\n  name: 'Question',\r\n  data() {\r\n    return {\r\n      session_guid: '',\r\n      question: null,\r\n      answers: [],\r\n      selected_index: null,\r\n      result_guid: null,\r\n      info: null,\r\n      interval: null\r\n    };\r\n  },\r\n  methods: {\r\n    answerSelected: function(answer) {\r\n      this.answers.forEach((x, i) => {\r\n        x['Chosen'] = false;\r\n        if (x.AnswerGUID === answer.AnswerGUID) {\r\n          x['Chosen'] = true;\r\n          this.selected_index = i;\r\n        }\r\n      });\r\n      ezpollapi.postResult(localStorage.getItem('session_guid'), localStorage.getItem('user_guid'),\r\n        this.selected_index == null ? null : this.answers[this.selected_index].AnswerGUID,\r\n        this.result_guid, response => {\r\n          this.result_guid = response;\r\n      });\r\n    },\r\n    showResults: function() {\r\n      ezpollapi.postShowResults(localStorage.getItem('session_guid'), localStorage.getItem('user_guid'), this.question.QuestionGUID);\r\n    },\r\n    nextQuestion: function() {\r\n      this.$router.push('createquestion');\r\n    },\r\n    getQuestion: function(question_guid) {\r\n      return ezpollapi.getQuestion(question_guid, response => {\r\n          this.selected_index = null;\r\n          this.result_guid = null;\r\n          this.question = response.question;\r\n          this.answers = response.answers;\r\n          this.answerSelected({});\r\n        });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.session_guid = localStorage.getItem('session_guid');\r\n    if (this.session_guid) {\r\n      ezpollapi.getSession(this.session_guid, session => {\r\n          this.getQuestion(session.QuestionGUID).then(() => {\r\n            this.interval = setInterval(() => {\r\n              ezpollapi.getResultStats(this.session_guid, localStorage.getItem('user_guid'), stats => {\r\n                  const isQuestionReset = this.info && this.info.results && stats && !stats.results;\r\n                  const isNewQuestion = stats.question_guid !== this.question.QuestionGUID;\r\n                  this.info = stats;\r\n                  if (isQuestionReset || isNewQuestion) {\r\n                    this.getQuestion(stats.question_guid);\r\n                  }\r\n                  if (this.info.results) {\r\n                    const inforesults = JSON.parse(JSON.stringify(this.info.results));\r\n                    const answers = JSON.parse(JSON.stringify(this.answers));\r\n                    this.info.results = answers.map(answer => {\r\n                      const inforesultsanswer = inforesults.find(x => x.AnswerGUID === answer.AnswerGUID);\r\n                      answer.AnswerCount = inforesultsanswer ? inforesultsanswer.AnswerCount : 0;\r\n                      return answer;\r\n                    });\r\n                  }\r\n                });\r\n            }, 2000);\r\n          });\r\n        });\r\n    } else {\r\n      this.$router.push('notfound');\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.interval);\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.btnselected {\r\n  background-color: #AAAAAA;\r\n}\r\n</style>\r\n"]}]}